import os
import threading
import traceback
import time
import requests

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ env
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]

# –•—Ä–∞–Ω–∏–º —É—á—ë—Ç–∫–∏ –∏ chat_id
# Format: {chat_id: (login, password)}
user_credentials: dict[int, tuple[str, str]] = {}

# –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
last_unread: dict[int, dict[str,int]] = {}

def send_telegram(chat_id: int, text: str) -> None:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    requests.post(url, data={"chat_id": chat_id, "text": text})

async def start(update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, f"–í–∞—à chat_id: {chat_id}\n"
        "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "/set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
        "–ü—Ä–∏–º–µ—Ä: /set abc_d 1234")

async def set_credentials(update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        login, pwd = context.args
    except ValueError:
        return await context.bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
    user_credentials[chat_id] = (login, pwd)
    last_unread[chat_id] = {}
    await context.bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.")

def check_messages(login: str, password: str, chat_id: int):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π user-data-dir, —á—Ç–æ–±—ã selenium –Ω–µ –ø–∞–¥–∞–ª
    options.add_argument(f"--user-data-dir=/tmp/user{chat_id}")

    driver = webdriver.Chrome(options=options)
    driver.get("https://cabinet.nf.uust.ru/chat/index")
    # –∂–¥–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CSS_SELECTOR, "li.room.nav-item"))
    )
    # –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    driver.find_element(By.NAME, "login").send_keys(login)
    driver.find_element(By.NAME, "password").send_keys(password)
    driver.find_element(By.CSS_SELECTOR, "button[type=submit]").click()

    # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    elems = driver.find_elements(By.CSS_SELECTOR, "span.badge.room-unread.pull-right")
    counts = {}
    for el in elems:
        cnt = int(el.text)
        # –∏–º—è —á–∞—Ç–∞ –±–µ—Ä—ë–º —É —Ä–æ–¥–∏—Ç–µ–ª—è
        name = el.find_element(By.XPATH, "./ancestor::a").text.strip()
        counts[name] = cnt

    driver.quit()

    prev = last_unread.get(chat_id, {})
    diffs = []
    for name, cnt in counts.items():
        old = prev.get(name, 0)
        if cnt > old:
            diffs.append(f"{name}: {cnt-old}")
    last_unread[chat_id] = counts

    if diffs:
        text = "üîî –£ –≤–∞—Å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(diffs)
        send_telegram(chat_id, text)

def background_loop():
    while True:
        for chat_id, (login, pwd) in user_credentials.items():
            try:
                check_messages(login, pwd, chat_id)
            except Exception:
                traceback.print_exc()
                send_telegram(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        time.sleep(60)

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set", set_credentials))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω
    threading.Thread(target=background_loop, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    # drop_pending_updates –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = True
    app.run_polling()

if __name__ == "__main__":
    main()
import os
import time
import logging

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s %(levelname)s:%(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    exit(1)

# –ü–æ chat_id —Ö—Ä–∞–Ω–∏–º (login, password)
user_credentials: dict[int, tuple[str, str]] = {}
# –ü–æ chat_id —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
last_counts: dict[int, int] = {}
# –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –æ—à–∏–±–∫–∞–º–∏
error_sent: dict[int, bool] = {}

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –æ—á–∏—Å—Ç–∫–∞
    for job in context.application.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()
    user_credentials.pop(chat_id, None)
    last_counts.pop(chat_id, None)
    error_sent.pop(chat_id, None)

    await update.message.reply_text(
        f"–í–∞—à chat_id: {chat_id}\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "/set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>"
    )

async def set_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>")
    login, pwd = context.args
    user_credentials[chat_id] = (login, pwd)
    last_counts[chat_id] = 0
    error_sent[chat_id] = False

    # –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job in context.application.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()

    # —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    context.application.job_queue.run_repeating(
        callback=check_messages,
        interval=60,
        first=0,
        name=str(chat_id),
        data=chat_id
    )
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–¥–∞–≤–ª—è–µ–º Telegram-409 Conflict
    from telegram.error import Conflict
    if isinstance(context.error, Conflict):
        logger.warning("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º Conflict –æ—Ç getUpdates")
    else:
        logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", exc_info=context.error)

async def check_messages(context: ContextTypes.DEFAULT_TYPE):
    chat_id: int = context.job.data
    creds = user_credentials.get(chat_id)
    if not creds:
        context.job.schedule_removal()
        return
    login, pwd = creds

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chromium
    opts = Options()
    opts.binary_location = "/usr/bin/chromium"
    opts.add_argument("--headless")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    service = Service("/usr/bin/chromedriver")
    driver = webdriver.Chrome(service=service, options=opts)

    try:
        # 1) –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        driver.get("https://cabinet.nf.uust.ru/")
        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, "login")))
        driver.find_element(By.ID, "login").send_keys(login)
        driver.find_element(By.ID, "password").send_keys(pwd)
        driver.find_element(By.CSS_SELECTOR, "button[type='submit']").click()

        # 2) –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç
        WebDriverWait(driver, 10).until(EC.url_contains("/chat/index"))
        logger.info(f"[{chat_id}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, URL: {driver.current_url}")

        # 3) —Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ–π–¥–∂–∏
        WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located(
                (By.CSS_SELECTOR, "span.badge.room-unread.pull-right")
            )
        )
        elems = driver.find_elements(By.CSS_SELECTOR, "span.badge.room-unread.pull-right")
        count = sum(int(e.text) for e in elems if e.text.isdigit())
        logger.info(f"[{chat_id}] –ù–∞–π–¥–µ–Ω–æ –±–µ–π–¥–∂–µ–π: {len(elems)}, count={count}")

        prev = last_counts.get(chat_id, 0)
        if count > prev:
            diff = count - prev
            await context.bot.send_message(
                chat_id,
                f"üîî –£ –≤–∞—Å {diff} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ–≥–æ {count})."
            )
            last_counts[chat_id] = count
        error_sent[chat_id] = False

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ check_messages")
        if not error_sent.get(chat_id, False):
            await context.bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            error_sent[chat_id] = True

    finally:
        driver.quit()

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("set",   set_cmd))
    app.add_error_handler(error_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
import os
import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
)
from webdriver_manager.chrome import ChromeDriverManager

# --- –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ HTTP/JobQueue ---
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]

# —Ö—Ä–∞–Ω–∏–º –∫—Ä–µ–¥–µ–Ω—à–∏–∞–ª—ã –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π count
user_credentials: dict[int, tuple[str, str]] = {}
last_counts: dict[int, int] = {}

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à chat_id: {update.effective_chat.id}\n"
        f"–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞: /set <login> <password>\n"
        f"–ü—Ä–∏–º–µ—Ä: /set abc_d 1234"
    )

async def set_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        return

    login, pwd = context.args
    user_credentials[chat_id] = (login, pwd)
    last_counts[chat_id] = 0

    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    context.job_queue.run_repeating(
        check_messages,
        interval=60,
        first=5,
        name=str(chat_id),
        data=chat_id
    )
    await update.message.reply_text(
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."
    )

async def check_messages(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–π–¥–∂–∏ –∏ –ø—Ä–∏—Ä–∞—â–∏–≤–∞–µ–º count"""
    job = context.job
    chat_id = job.data

    if chat_id not in user_credentials:
        return  # –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

    login, pwd = user_credentials[chat_id]

    # –∑–∞–ø—É—Å–∫–∞–µ–º Selenium
    opts = webdriver.ChromeOptions()
    opts.add_argument("--headless")
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=opts)

    try:
        # –∑–∞—Ö–æ–¥–∏–º –≤ –∫–∞–±–∏–Ω–µ—Ç
        driver.get("https://cabinet.nf.uust.ru/login")
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "username")))
        driver.find_element(By.NAME, "username").send_keys(login)
        driver.find_element(By.NAME, "password").send_keys(pwd)
        driver.find_element(By.XPATH, "//button[@type='submit']").click()

        # –∂–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        WebDriverWait(driver, 10).until(EC.url_contains("/dashboard"))

        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç-–ª–∏—Å—Ç
        driver.get("https://cabinet.nf.uust.ru/chat/index")
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "li.room.nav-item")))

        # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–µ–π–¥–∂–∏
        spans = driver.find_elements(By.CSS_SELECTOR, "span.badge.room-unread.pull-right")
        logger.info(f"[{chat_id}] –í—Å–µ–≥–æ –±–µ–π–¥–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(spans)}")

        # —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –∏ —Å —Ü–∏—Ñ—Ä–æ–π –≤–Ω—É—Ç—Ä–∏
        count = 0
        for span in spans:
            if not span.is_displayed():
                continue
            text = span.text.strip()
            logger.info(f"[{chat_id}] –±–µ–π–¥–∂ —Ç–µ–∫—Å—Ç = {repr(text)}")
            if text.isdigit():
                count += int(text)

        logger.info(f"[{chat_id}] –ò—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {count}")

        # –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å –±–æ–ª—å—à–µ, —á–µ–º —Ä–∞–Ω—å—à–µ ‚Äî —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if count > last_counts.get(chat_id, 0):
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üîî –£ –≤–∞—Å {count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!"
            )

        last_counts[chat_id] = count

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_messages: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    finally:
        driver.quit()
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("set", set_cmd))
    app.run_polling()

if __name__ == "__main__":
    main()
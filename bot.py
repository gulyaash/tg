import os
import logging
import traceback
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚Äî‚Äî‚Äî
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –¢–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    exit(1)

# ‚Äî‚Äî‚Äî –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ‚Äî‚Äî‚Äî
user_credentials: dict[int, tuple[str, str]] = {}
last_counts:       dict[int, int] = {}
ERROR_SENT:        dict[int, bool] = {}

CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥

def create_driver() -> webdriver.Chrome:
    opts = Options()
    opts.add_argument("--headless")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    return webdriver.Chrome(options=opts)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id,
        f"–í–∞—à chat_id: {chat_id}\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "/set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>"
    )
    # –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏/—Å—Ç–∞—Ç—ã
    user_credentials.pop(chat_id, None)
    last_counts.pop(chat_id, None)
    ERROR_SENT.pop(chat_id, None)
    # —É–¥–∞–ª—è–µ–º –≤—Å–µ job-–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    for job in context.application.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()

async def set_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if len(context.args) != 2:
        return await context.bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>")
    login, pwd = context.args
    user_credentials[chat_id] = (login, pwd)
    last_counts[chat_id] = 0
    ERROR_SENT[chat_id] = False

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
    for job in context.application.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    context.application.job_queue.run_repeating(
        callback=check_messages,
        interval=CHECK_INTERVAL,
        first=5,
        name=str(chat_id),
        data=chat_id
    )

    await context.bot.send_message(chat_id, f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ {CHECK_INTERVAL} —Å–µ–∫.")

async def check_messages(context: ContextTypes.DEFAULT_TYPE):
    chat_id: int = context.job.data
    creds = user_credentials.get(chat_id)
    if not creds:
        # –µ—Å–ª–∏ –Ω–µ—Ç creds ‚Äî –æ—Ç–º–µ–Ω—è–µ–º
        context.job.schedule_removal()
        return

    login, pwd = creds
    try:
        driver = create_driver()
        # --- –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
        driver.get("https://cabinet.nf.uust.ru/chat/index")
        # driver.find_element(...).send_keys(login)
        # driver.find_element(...).send_keys(pwd)
        # driver.find_element(...).click()
        # –¥–∞–ª–µ–µ –Ω–∞—Ö–æ–¥–∏–º –±–µ–π–¥–∂–∏ —Å –∫–ª–∞—Å—Å–æ–º .badge.room-unread.pull-right
        elems = driver.find_elements("css selector", "span.badge.room-unread.pull-right")
        total = sum(int(e.text) for e in elems if e.text.isdigit())
        driver.quit()

        prev = last_counts.get(chat_id, 0)
        if total != prev:
            # —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–ª—ë–º
            if total > 0:
                await context.bot.send_message(
                    chat_id,
                    f"üîî –£ –≤–∞—Å {total} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
                )
            last_counts[chat_id] = total
        ERROR_SENT[chat_id] = False  # —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ—à–∏–±–∫–∏

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ check_messages")
        if not ERROR_SENT.get(chat_id, False):
            await context.bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            ERROR_SENT[chat_id] = True
        try:
            driver.quit()
        except:
            pass

def main():
    # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("set",   set_cmd))

    # —Å—Ç–∞—Ä—Ç—É–µ–º polling (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∏ –Ω–µ –≤—ã–ª–µ—Ç–∞–µ—Ç)
    app.run_polling()

if __name__ == "__main__":
    main()
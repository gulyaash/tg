import os
import logging
import traceback
import requests
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# ==== 1) –ó–∞–≥—Ä—É–∑–∫–∞ .env (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) ====
load_dotenv()  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–∏—Ç–∞–µ—Ç .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

# ==== 2) –¢–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']

# ==== 3) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ====
logging.basicConfig(
    format='%(asctime)s %(levelname)s %(message)s',
    level=logging.INFO
)

# ==== 4) –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ====
user_credentials: dict[int, tuple[str, str]] = {}
last_counts:       dict[int, int] = {}
error_notified:    dict[int, bool] = {}


async def send_telegram(chat_id: int, text: str):
    """–ü—Ä–æ—Å—Ç–∞—è –æ–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ sendMessage API."""
    url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
    try:
        requests.post(url, data={'chat_id': chat_id, 'text': text})
    except Exception:
        logging.exception("–ù–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ")


async def check_messages(context: ContextTypes.DEFAULT_TYPE):
    """
    –ï–∂–µ–Ω–æ–º–∏–Ω—É—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: –ª–æ–≥–∏–Ω–∏–º—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç,
    —Å–æ–±–∏—Ä–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–æ—à–ª—ã–º,
    —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫—É –æ–¥–∏–Ω —Ä–∞–∑.
    """
    chat_id = context.job.chat_id
    creds = user_credentials.get(chat_id)
    if creds is None:
        return  # –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ

    login, password = creds

    try:
        # === –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º selenium ===
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-gpu')
        driver = webdriver.Chrome(options=options)

        # === –õ–æ–≥–∏–Ω–∏–º—Å—è ===
        driver.get('https://cabinet.ni.ifnt.ru/chat/')
        # TODO: —Ç—É—Ç –≤–∞—à –∫–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π login/password –∏ –≤—Ö–æ–¥–∞

        # === –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ ===
        elems = driver.find_elements_by_css_selector('span.badge.room-unread.pull-right')
        counts = [int(e.text) for e in elems if e.text.isdigit()]
        total = sum(counts)

        prev = last_counts.get(chat_id)
        if prev is None or total != prev:
            if total > 0:
                # —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                msg = f"üîî –£ –≤–∞—Å {total} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
                # –°–æ–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM
                names = driver.find_elements_by_css_selector('a.room-name-selector')  # –ø—Ä–∏–º–µ—Ä
                for name_el, cnt in zip(names, counts):
                    msg += f"{name_el.text}: {cnt}\n"
                await send_telegram(chat_id, msg)

            last_counts[chat_id] = total

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        error_notified[chat_id] = False

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ check_messages")
        # —à–ª—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        if not error_notified.get(chat_id, False):
            await send_telegram(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            error_notified[chat_id] = True

    finally:
        try:
            driver.quit()
        except:
            pass


async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        f"–í–∞—à chat_id: {chat_id}\n"
        "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "/set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
        "–ü—Ä–∏–º–µ—Ä: /set abc_d 1234"
    )


async def set_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = context.args or []
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>")
        return

    login, pwd = args
    user_credentials[chat_id] = (login, pwd)
    last_counts[chat_id] = None
    error_notified[chat_id] = False
    await update.message.reply_text(
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."
    )
    # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ JobQueue
    context.job_queue.run_repeating(
        check_messages,
        interval=60,       # —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥
        first=0,           # —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å
        chat_id=chat_id    # —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –¥–ª—è –∫–∞–∫–æ–≥–æ —á–∞—Ç–∞
    )


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("set",   set_cmd))
    app.run_polling()


if __name__ == "__main__":
    main()
import os
import asyncio
import traceback
import tempfile
import uuid

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

# ------------  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞  ------------

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ, —Å–æ–∑–¥–∞–π—Ç–µ .env —Ä—è–¥–æ–º –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω—ë–º:
# TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω
# –∞ –∑–∞—Ç–µ–º —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
# from dotenv import load_dotenv
# load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# ------------  –ü–∞–º—è—Ç—å  ------------

# –ü–æ chat_id —Ö—Ä–∞–Ω–∏–º { login, password, last_counts }
USER_CFG: dict[int, dict] = {}

# ------------  –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏  ------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à chat_id: {update.effective_chat.id!r}\n"
        "–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "/set <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n"
        "–ü—Ä–∏–º–µ—Ä: /set abc_d 1234"
    )

async def set_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å")
        return

    login, password = args
    USER_CFG[chat_id] = {
        "login": login,
        "password": password,
        "last_counts": {}
    }

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ ‚Äî –æ–Ω–∞ –ø–µ—Ä–µ–µ–¥–µ—Ç)
    context.job_queue.run_repeating(
        check_job,
        interval=60,
        first=0,
        chat_id=chat_id,
    )

    await update.message.reply_text(
        "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."
    )

# ------------  –§–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞  ------------

async def check_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    cfg = USER_CFG.get(chat_id)
    if not cfg:
        return

    try:
        new_counts = fetch_unread_counts(cfg["login"], cfg["password"])
        diffs = []
        total_new = 0

        for name, cnt in new_counts.items():
            prev = cfg["last_counts"].get(name, 0)
            if cnt > prev:
                diffs.append(f"{name}: {cnt - prev}")
                total_new += cnt - prev

        if diffs:
            text = f"üîî –£ –≤–∞—Å {total_new} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n" + "\n".join(diffs)
            await context.bot.send_message(chat_id=chat_id, text=text)

        cfg["last_counts"] = new_counts

    except Exception:
        tb = traceback.format_exc()
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n" + tb[:2000]
        )

# ------------  Selenium-–ª–æ–≥–∏–∫–∞  ------------

def fetch_unread_counts(login: str, password: str) -> dict[str, int]:
    """
    –õ–æ–≥–∏–Ω–∏–º—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {–Ω–∞–∑–≤–∞–Ω–∏–µ_–¥–∏–∞–ª–æ–≥–∞: —á–∏—Å–ª–æ_–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö, ...}
    """

    # –°–æ–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏ Chrome
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–ª–ª–∏–∑–∏–π
    profile_dir = tempfile.mkdtemp(prefix="chrome-profile-")
    options.add_argument(f"--user-data-dir={profile_dir}")

    driver = webdriver.Chrome(options=options)
    try:
        # 1) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        driver.get("https://cabinet.nf.–≤–∞—à_–¥–æ–º–µ–Ω/chat/index")

        # 2) –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        driver.find_element(By.CSS_SELECTOR, "#login_input").send_keys(login)
        driver.find_element(By.CSS_SELECTOR, "#password_input").send_keys(password)
        driver.find_element(By.CSS_SELECTOR, "#login_button").click()

        # 3) –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        driver.implicitly_wait(10)
        # 4) –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        badges = driver.find_elements(By.CSS_SELECTOR, "span.badge.room-unread.pull-right")
        titles = driver.find_elements(By.CSS_SELECTOR, "a.room.nav-item")
        result: dict[str, int] = {}
        for title_el, badge_el in zip(titles, badges):
            name = title_el.text.strip()
            count = int(badge_el.text.strip())
            result[name] = count

        return result

    finally:
        driver.quit()

# ------------  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞  ------------

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set", set_cmd))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())